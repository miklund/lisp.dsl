// Signature file for parser generated by fsyacc
module Parser
type token = 
  | END
  | LPAREN
  | RPAREN
  | DEFUN
  | IDENTIFIER of (string)
  | BOOLEAN of (bool)
  | NUMBER of (int)
type tokenId = 
    | TOKEN_END
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_DEFUN
    | TOKEN_IDENTIFIER
    | TOKEN_BOOLEAN
    | TOKEN_NUMBER
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression
    | NONTERM_parameters
    | NONTERM_arguments
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Lisp.Statements.Ast list) 
